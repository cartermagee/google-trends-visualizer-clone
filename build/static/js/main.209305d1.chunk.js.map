{"version":3,"sources":["components/Card.js","components/Tile.js","components/Logo.js","components/Square.js","components/GridChooser.js","App.js","index.js"],"names":["Card","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleType","_this$props","animal","speed","nextCard","text","state","setTimeout","setState","substring","length","color","react_default","a","createElement","className","style","background","target","href","rel","id","Component","Tile","animals","colors","transitions","typingSpeed","currentCard","objectSpread","card","nextAnimalIndex","Math","floor","random","animalIndex","nextAnimal","nextColorIndex","colorIndex","transition","duration","cards","_this$props2","currAnimalIndex","currAnimal","currColorIndex","currColor","currId","currentSpeed","react_transition_group","component","in","key","timeout","classNames","unmountOnExit","mountOnEnter","components_Card","Logo","Square","_ref","setGrid","dim","title","onClick","GridChooser","hover","i","squaresArray","j","row","push","components_Square","squares","concat","apply","_this2","width","height","onMouseEnter","handleEnter","onMouseLeave","handleLeave","renderSquares","App","dimensions","rows","columns","Animals","Colors","Transitions","TypingSpeed","_this$state","grid","display","gridTemplateRows","gridTemplateColumns","tiles","components_Tile","map","rowArr","index","components_GridChooser","components_Logo","renderGrid","ReactDOM","render","src_App","document","getElementById"],"mappings":"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","file":"static/js/main.209305d1.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport PropTypes from 'prop-types';\n\nclass Card extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          text: ''\n        }\n      }\n\n  componentDidMount() {\n    this.handleType();\n  }\n\n  handleType = () => {\n    const { animal, speed,  nextCard} = this.props;\n    const { text } = this.state;\n\n    setTimeout(() => {\n      this.setState({\n        text: animal.substring(0, text.length + 1),\n      })\n    }, speed)\n\n    if (text === animal) {\n      setTimeout( nextCard, 2500)\n      return;\n    }\n    setTimeout(this.handleType, speed);\n  };\n\n    render() {\n        const { color } = this.props;\n        return (\n            <div className=\"card\" style={{background: color}}>\n                <a \n                    className=\"typing fade-in\"\n                    target=\"_blank\" href=\"https://youtu.be/dQw4w9WgXcQ?t=42\"\n                    rel=\"noopener noreferrer\"\n                >\n                    <span>{this.state.text}</span>\n                    <span id=\"cursor\"></span>\n                </a>\n            </div>\n        );\n    }\n}\nCard.propTypes = {\n\n    animal: PropTypes.string.isRequired,\n    color:PropTypes.string.isRequired,\n    nextCard: PropTypes.func.isRequired,\n    speed:PropTypes.number.isRequired,\n}\n    export default Card;","import React, { Component } from 'react';\nimport '../styles/tile.css';\nimport '../styles/transitions.css';\nimport { TransitionGroup, CSSTransition } from 'react-transition-group'\nimport Card from './Card.js';\nimport PropTypes from 'prop-types';\n\nclass Tile extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            duration: 1000,\n            cards: [],\n            card: {}\n        }\n    }\n    componentWillMount() {\n        const { animals, colors, id, transitions, typingSpeed } = this.props;\n        const currAnimalIndex = Math.floor(Math.random()*animals.length);\n        const currAnimal = animals[currAnimalIndex];\n        \n        const currColorIndex = Math.floor(Math.random()*colors.length);\n        const currColor = colors[currColorIndex];\n        \n        const currId = id+\" \"+currAnimal;\n        const currentSpeed = typingSpeed[Math.floor(Math.random()*typingSpeed.length)]\n\n        const currTransition = transitions[Math.floor(Math.random()*transitions.length)];\n       \n\n        let currentCard = {\n            animal: currAnimal,\n            animalIndex: currAnimalIndex,\n            color: currColor,\n            colorIndex: currColorIndex,\n            id: currId,\n            transition: currTransition,\n            speed:currentSpeed\n        };\n        \n        this.setState({ card: currentCard, id: id });\n    }\n\n    nextCard = () => {\n        const { animals, colors, id, transitions, typingSpeed } = this.props;\n\n        let currentCard = {...this.state.card};\n        \n        let nextAnimalIndex = Math.floor(Math.random()*animals.length);\n        \n        if (nextAnimalIndex === currentCard.animalIndex && nextAnimalIndex !== 0) {\n            nextAnimalIndex = nextAnimalIndex - 1;\n        } else if (nextAnimalIndex === 0){ \n            nextAnimalIndex = nextAnimalIndex + 2;\n        }\n        \n        const nextAnimal = animals[nextAnimalIndex];\n\n        \n        const nextColorIndex = Math.floor(Math.random()*colors.length);\n        const nextColor = colors[nextColorIndex];\n        \n        \n        const nextId = id+\" \"+nextAnimal;\n\n        const nextTransition = transitions[Math.floor(Math.random()*transitions.length)];\n        const nextSpeed = typingSpeed[Math.floor(Math.random()*typingSpeed.length)]\n        \n        let nextCard = {\n            animal: nextAnimal,\n            animalIndex: nextAnimalIndex,\n            color: nextColor,\n            colorIndex: nextColorIndex,\n            id: nextId,\n            transition: nextTransition,\n            speed: nextSpeed\n        };\n        this.setState({ card: nextCard });\n    }\n    \n    render(){\n        const { card } = this.state;\n        return (\n            <TransitionGroup component='div' id={card.id} className='tile'>\n                <CSSTransition\n                    in={true}\n                    key={card.id}\n                    timeout={500}\n                    classNames={card.transition}\n                    unmountOnExit={true}\n                    mountOnEnter={true}\n                > \n                    <Card animal={card.animal} color={card.color} speed={card.speed} nextCard={this.nextCard}/>\n                </CSSTransition>\n            </TransitionGroup>\n\n        );\n    }\n}\n\nTile.propTypes = {\n    animals: PropTypes.array.isRequired,\n    colors: PropTypes.array.isRequired,\n    id: PropTypes.string.isRequired,\n    transitions: PropTypes.array.isRequired,\n    typingSpeed: PropTypes.array.isRequired\n}\n\nexport default Tile;","import React from 'react';\n\nconst Logo = () => (\n    <a className=\"logo\" href=\"https://trends.google.com/trends/hottrends/visualize?pn=p1&nrow=5&ncol=5\"><b className=\"logoBold\">Google</b>Trends</a>\n)\nexport default Logo;","import React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Square = ({setGrid, dim}) => (\n    <div className=\"square\" title={dim[0]+'x'+dim[1]} dim={dim} onClick={() => setGrid(dim)}></div> \n)\nSquare.propTypes = {\n    setGrid: PropTypes.func.isRequired,\n    dim: PropTypes.array.isRequired\n}\nexport default Square;","import React, {Component} from 'react';\nimport Square from './Square';\nimport PropTypes from 'prop-types';\n\nclass GridChooser extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            hover: false\n        }\n    }\n    renderSquares(){\n        const { setGrid } = this.props;\n        let i = 0;\n        let squaresArray = [];\n        while ( i < 5) {\n            let j = 0;\n            let row = [];\n            while (j < 5) {\n                let dim = [i+1, j+1];\n                row.push(<Square key={dim} setGrid={setGrid} dim={dim}/>)\n                j++\n            }\n            squaresArray.push(row);\n            i++;\n        }\n        const squares = [].concat.apply([], squaresArray);\n        return (\n            <div className='gridChooser'>{squares}</div>\n        )\n    }\n    handleEnter() {\n        this.setState({hover: true});\n    }\n    handleLeave() {\n        this.setState({hover: false});\n        \n    }\n    render() {\n        const style = {\n            width: this.state.hover ? 120 : 30,\n            height: this.state.hover ? 120 : 30,\n        }\n        return (\n            <div className=\"squareContainer\" \n                style={style} \n                onMouseEnter={() => this.handleEnter()} \n                onMouseLeave={() => this.handleLeave()}\n            >\n            {this.renderSquares()}\n            </div> \n        );\n\n    }\n}\nGridChooser.propTypes = {\n    setGrid: PropTypes.func.isRequired\n}\nexport default GridChooser;","import React, { Component } from 'react';\nimport './styles/main.css';\nimport Animals from './data/animal_names.json';\nimport Colors from './data/colors.json';\nimport Transitions from './data/transitions.json';\nimport TypingSpeed from './data/typingSpeed.json';\n\nimport Tile from './components/Tile.js';\nimport Logo from './components/Logo.js';\nimport GridChooser from './components/GridChooser.js';\n\nclass App extends Component {\n  constructor(props){\n    super(props)\n    this.state = {\n      colors: [],\n      animals: [],\n      typingSpeed: [],\n      rows: '',\n      columns: '',\n      transitions: []\n    }\n  }\n  componentWillMount(){\n    this.setState({animals: Animals, colors: Colors, transitions: Transitions, typingSpeed: TypingSpeed, rows: 5, columns: 5});\n  }\n  setGrid = (dimensions) => {\n    this.setState({rows: dimensions[0], columns: dimensions[1]});\n  }\n  renderGrid() {\n    const { colors, animals, rows, columns, transitions, typingSpeed } = this.state;\n    const grid = {\n        width: '100%',\n        height: '100%',\n        display: 'grid',\n        gridTemplateRows: `repeat(${rows}, calc(100vh / ${rows}))`\n    }\n    const row = {\n        display: 'grid',\n        gridTemplateColumns: `repeat(${columns}, calc(100vw / ${columns}))`,\n    }\n      \n    let i = 0;\n    let tiles = [];\n    while ( i < rows) {\n      let j = 0;\n      let row = [];\n      while (j < columns) {\n        let id = i+'-'+j;\n        row.push(<Tile id={id} key={id} animals={animals} transitions={transitions} colors={colors} typingSpeed={typingSpeed}/>);\n        j++;\n      }\n      tiles.push(row);\n      i++;\n    }\n\n    return ( <div className ='grid' style={grid}>{tiles.map((rowArr, index) => {\n      return <div key={index} className='row' style={row}>{rowArr}</div>;\n    })}</div> )\n  }\n\n  render() {\n    return (\n      <main>\n        <GridChooser setGrid={this.setGrid}/>\n        <Logo/>\n        {this.renderGrid()}\n      </main>\n    );\n  }\n}\n\nexport default App;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/main.css';\nimport App from './App';\n\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}